"""
Django settings for kabinet project.

Generated by 'django-admin startproject' using Django 1.11.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
from datetime import timedelta

import pytz
from distutils.util import strtobool
from dotenv import load_dotenv

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

env_file = os.path.join(BASE_DIR, '.env')
load_dotenv(env_file)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', '')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = strtobool(os.environ.get('DEBUG', '0'))

DEVELOPMENT = strtobool(os.environ.get('DEVELOPMENT', '0'))
STAGING = strtobool(os.environ.get('STAGING', '0'))
PRODUCTION = strtobool(os.environ.get('PRODUCTION', '0'))

ALLOWED_HOSTS = []


# Application definition

DJANGO_APPS = [
    'jet.dashboard',
    'jet',

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

VENDOR_APPS = [
    'django_extensions',
    'rest_framework',
    'rest_framework_mongoengine',
]

if DEBUG:
    VENDOR_APPS.append('debug_toolbar')

PROJECT_APPS = [
    'apps.reports',
    'apps.calls',
    'apps.realty',
    'apps.kauth',
    'apps.ogrealty',
]

INSTALLED_APPS = DJANGO_APPS + VENDOR_APPS + PROJECT_APPS

DJANGO_MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

VENDOR_MIDDLEWARE = []

if DEBUG:
    VENDOR_MIDDLEWARE.append('debug_toolbar.middleware.DebugToolbarMiddleware')

PROJECT_MIDDLEWARE = [
    'kabinet.middleware.timezone_middleware',
]

MIDDLEWARE = DJANGO_MIDDLEWARE + VENDOR_MIDDLEWARE + PROJECT_MIDDLEWARE

ROOT_URLCONF = 'kabinet.urls'

AUTH_USER_MODEL = 'kauth.KUser'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'OPTIONS': {
            'context_processors': [
                'django.contrib.auth.context_processors.auth',
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            'loaders': [
                'django.template.loaders.app_directories.Loader'
            ]
        },
    },
]

WSGI_APPLICATION = 'kabinet.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': os.environ['DB_NAME'],
        'USER': os.environ['DB_USER'],
        'PASSWORD': os.environ['DB_PASSWORD'],
        'HOST': os.environ['DB_HOST'],
        'PORT': os.environ['DB_PORT']
    },
    'ogadmin': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': os.environ['OGADMIN_DB_NAME'],
        'USER': os.environ['OGADMIN_DB_USER'],
        'PASSWORD': os.environ['OGADMIN_DB_PASSWORD'],
        'HOST': os.environ['OGADMIN_DB_HOST'],
        'PORT': os.environ['OGADMIN_DB_PORT']
    }
}

DATABASE_ROUTERS = ('apps.ogrealty.router.OGRouter',)


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

# LANGUAGE_CODE = 'en-us'
LANGUAGE_CODE = 'ru-RU'

TIME_ZONE = 'Europe/Moscow'

USE_I18N = True

USE_L10N = True

USE_TZ = True

MOSCOW_TIMEZONE = pytz.timezone('Europe/Moscow')


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = (os.path.join(BASE_DIR, 'static'),)

MEDIA_URL = '/media/'

MORDA_DOMAIN = 'ongrad.ru'

UISCOM_DATA_API_BASE_URL = 'https://dataapi.uiscom.ru/v2.0'
UISCOM_DATA_API_TOKEN = os.environ.get('UISCOM_DATA_API_TOKEN')

ISO8601_FORMAT = '%Y-%m-%d %H:%M:%S'

CELERY_TIMEZONE = 'Europe/Moscow'
CELERY_BEAT_SCHEDULE = {
    'load-calls-from-uiscom': {
        'task': 'load_calls_from_uiscom',
        'schedule': timedelta(hours=5).total_seconds()
    },
    'load-ya-metrika-report': {
        'tasks': 'load_ya_metrika_report',
        'schedule': timedelta(days=1).total_seconds()
    },
    'load-ya-direct-report': {
        'tasks': 'load_ya_direct_report',
        'schedule': timedelta(days=1).total_seconds()
    }
}
CELERY_TASK_ALWAYS_EAGER = strtobool(os.environ.get('CELERY_TASK_ALWAYS_EAGER', '0'))

BROKER = os.environ.get('CELERY_BROKER')

SWIFT_AUTH_URL = 'https://auth.selcdn.ru'
SWIFT_USERNAME = os.environ.get('SWIFT_USERNAME')
SWIFT_KEY = os.environ.get('SWIFT_KEY')
SWIFT_CONTAINER_NAME = os.environ.get('SWIFT_CONTAINER_NAME')

SWIFT_AUTO_OVERWRITE = True
SWIFT_AUTH_TOKEN_DURATION = 60 * 60 * 12
SWIFT_BASE_URL = os.environ.get('SWIFT_BASE_URL')
OVERRIDE_BASE_URL = os.environ.get('SWIFT_OVERRIDE_BASE_URL')

JET_DEFAULT_THEME = 'light-blue'
JET_INDEX_DASHBOARD = 'jet.dashboard.dashboard.DefaultIndexDashboard'

JET_MODULE_YANDEX_METRIKA_CLIENT_ID = os.environ.get('YANDEX_METRIKA_CLIENT_ID')
JET_MODULE_YANDEX_METRIKA_CLIENT_SECRET = os.environ.get('YANDEX_METRIKA_CLIENT_SECRET')

YANDEX_API_TOKEN = os.environ.get('YANDEX_API_TOKEN')

MONGODB_HOST = os.environ.get('MONGODB_HOST')
MONGODB_DB = os.environ.get('MONGODB_DB')

import mongoengine
mongoengine.connect(db=MONGODB_DB, host=MONGODB_HOST)
